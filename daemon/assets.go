// Code generated by go-bindata.
// sources:
// assets/cert.pem
// assets/key.pem
// assets/launchagent.plist
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCertPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x4d\xd3\xb2\x46\x10\xbc\xf3\x2b\x72\xb7\x52\x82\xa2\xc2\x21\x87\x59\x16\x64\x5d\x41\x96\x0f\x11\x6f\x0f\xca\x37\x88\x08\xb2\xc2\xaf\x8f\xef\x9b\x5b\x52\xd9\xdb\x76\xcf\x74\xd7\x54\x57\xf5\x9f\xbf\x1e\xd2\xf7\xc4\xfe\x43\xd3\x5d\x9f\x18\x44\x03\x5f\xff\x8d\x0a\x16\x21\x18\x61\x4d\x83\x64\xca\x80\x13\x04\x19\x61\xfa\xb5\xe0\xa5\x4b\x0e\x07\x7a\x6a\x60\x52\x69\xac\x3a\x41\xee\x83\x8d\xb2\xaa\xcb\xab\x62\xaf\x72\x11\x01\xeb\x0d\xc0\xe0\x09\x96\x0b\x1c\x67\x11\x3e\x33\x46\x75\x7e\x47\xd1\x4a\xaa\x89\x6e\x8f\x96\x06\x17\xec\xeb\x2b\x0b\xb3\xc9\xc6\x64\xb2\xe6\xdb\x7c\x32\xda\x08\xcf\x84\x9f\x70\xc0\x6d\x0c\x6b\xab\x24\xb3\x60\xcf\x96\x1c\x96\xe0\xfd\xaf\x10\x21\x88\x94\xff\x76\xd7\x0d\x80\x93\x06\x4c\x81\x5f\x27\x20\x2d\xa3\xdf\x8f\x0e\xfd\x2a\xc8\x57\x87\x18\x7e\xd6\x1b\x9a\x4b\x40\xb7\x56\x5e\x31\x7e\xb4\xcd\x65\x96\xc4\xc7\xf7\xd6\x02\x7c\x74\xd4\x8b\x77\x41\xe3\xe4\x1c\xfa\xed\xa1\x0d\x65\xe1\xbe\x68\x43\xe9\xf8\xa6\x9f\x07\x1e\x54\xe2\xad\xb9\x1f\xc4\x8b\x85\x27\xad\x8c\x55\x25\x69\xf2\xb8\xdf\x16\xef\xfb\xa7\x08\x66\x35\x2f\x86\x20\x9f\x7c\x6b\x08\x1f\x6b\xae\xf5\x41\xfc\x04\x16\x14\x02\x0b\x22\x2d\x04\x51\x59\xb7\xed\xf6\xe7\x47\x7b\x55\x59\x7e\xb9\xee\x36\xf1\x7d\xd8\xa4\xc7\x8d\x75\xd6\x68\xbd\xae\x56\x4b\x3d\xda\x1d\x96\xb2\xa4\x76\x97\x70\xb9\x8b\xc3\x75\x74\xe7\xa7\xfb\x77\x4e\x12\x46\xdf\xf1\xaf\x83\xbc\x78\x05\xfd\x69\xf3\x0e\x93\x6d\x4d\xc2\x39\xf5\xab\x4f\xe1\x99\x65\x4f\xd5\x24\xbe\x30\xf1\x53\xa9\x31\x82\xc3\xb9\x23\xcf\x58\x06\x5b\x4d\xda\x5c\x96\x77\x49\xd9\xbd\x26\xc1\xf3\x8e\xa9\xda\x18\x68\xd4\x77\x73\xa3\x2c\x71\xfd\xf0\x8f\x9b\x9f\xd1\x72\xc6\x66\x19\x17\xe5\x26\xbb\x9a\x7c\xb7\x78\x88\xdb\x95\x73\x36\x5e\xa1\xd1\xd1\xfb\x70\x1b\xbb\xc9\xaa\x25\xa6\x88\x05\x11\x60\xf5\x74\x59\x3a\x7e\x6c\xc4\x36\xdb\x46\x7b\x74\x6d\xe0\xeb\xe9\x70\x3e\xa7\x57\xe5\x8a\x6f\xf6\x87\x13\x0c\x0c\x50\x2b\x31\x1e\x94\x70\x42\x99\x7d\x36\x99\x82\x20\x55\x74\x04\x96\x26\x40\xc7\xb8\xce\xbf\xf1\xb9\x62\x8d\x80\x73\x2d\x8b\x08\xe5\x11\x42\x2c\x30\xe1\xcb\xe0\x7f\x38\x1f\x98\xb9\x44\x10\xf0\x2f\x86\x96\x33\xfc\xfc\x16\x72\x75\x5d\xd0\x67\x70\xb3\xac\xee\xe3\x95\x9d\xc7\xfb\x7c\xbc\xad\x3d\x13\x99\x0a\x00\x7c\x97\x59\x74\xa0\xed\x95\x7c\x51\xfb\x1b\xf3\x11\x31\xc0\x59\xf6\x35\x36\xfb\xb3\x65\xd9\xd7\xc3\x0f\xc7\xc2\x15\x2e\xe9\xbb\x8e\x2c\x35\x45\xce\xe9\x47\x66\x6a\x61\xca\x16\xa6\xef\x48\x31\x27\x73\x4d\x27\x02\x97\xe1\xd1\x91\xe9\x73\x90\x23\x78\xf9\xdb\xf1\xb9\xbe\xd4\x9f\x85\x48\x9a\x4a\x2a\xad\x38\x17\x80\x86\xb9\xab\x32\x6f\xf2\xe7\xf6\xd3\x37\x8e\x93\x84\x94\xba\x56\x8d\xd4\x5d\x81\x23\x9c\xb5\x49\x27\x8b\xb3\x46\x8d\x62\x61\xef\x9a\xe8\x3d\xef\x1d\x7f\x11\x2e\xf3\x9e\xc9\xc6\xfc\x7c\xc7\x02\xdf\xbd\x1d\xe7\xde\xad\xf5\xe5\x4d\x2a\x0a\x51\x5d\x5c\x86\x2a\xd9\x8b\x81\xac\x64\xbe\x78\x82\xb6\xf4\xa8\x8a\xb7\x09\xa7\xcd\x3d\xae\x48\x3d\xa6\x76\x4b\x15\xa0\x66\xa5\xdd\x86\x40\x44\x9e\xb0\x29\x5c\xe9\xae\x55\xfb\xe2\x58\x37\x6b\x50\xeb\xe9\x75\x89\x6e\x62\x53\x47\xb1\x4b\x6a\x7d\x41\xf3\xcd\xc5\xe0\xc4\xb3\xfd\x95\xec\xa5\xb8\x32\xa6\xa1\xda\xb6\xe1\x79\xb8\xe6\xfb\xc6\x32\xd0\x4e\x08\x8c\xbd\xf1\xec\x0e\x48\x4a\x0d\x52\x94\x8f\x5e\x1f\x0b\xa9\xb9\x47\x2f\xc5\xd9\xc4\xee\xf2\xf0\x2e\x68\x2a\x35\x3c\x50\xcd\xac\x74\xd9\x26\x39\xa6\xdb\x3c\x7d\xab\x77\x8d\xbe\x14\x23\x7c\xca\xad\x90\xc8\x55\x22\x7f\xbc\xfe\x53\x57\x7f\x09\xbf\x2b\x42\xb7\xf1\x7f\x6b\xe3\xef\x00\x00\x00\xff\xff\xd7\x18\x1b\x6e\x53\x04\x00\x00")

func assetsCertPemBytes() ([]byte, error) {
	return bindataRead(
		_assetsCertPem,
		"assets/cert.pem",
	)
}

func assetsCertPem() (*asset, error) {
	bytes, err := assetsCertPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cert.pem", size: 1107, mode: os.FileMode(420), modTime: time.Unix(1461537458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsKeyPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb5\x12\xb4\x08\x10\x84\x73\x9e\xe2\xcf\xa9\x2b\xdc\x42\x74\xd1\x5d\xdc\x32\xdc\x61\x71\x79\xfa\xdb\xfb\xe3\x9b\x74\x26\xe8\xfa\xba\xa6\xfb\x9f\xff\x86\x13\x5f\xca\xfb\x8f\xed\xb0\x7f\x4c\x5b\xf1\x59\x57\xfc\xa3\x89\xd1\xdf\x0d\x60\x28\x8a\x38\x9d\x0a\xc7\xb2\x1a\xcf\x5a\x22\xbb\xa2\x5e\x8d\xaa\x29\x9b\x60\x84\x56\x23\xac\x46\x1a\x75\x67\x9d\xfa\x5b\x86\xaa\x22\xd5\x77\xd2\x60\x05\xdd\x64\x42\x27\xe4\x8e\xdb\x54\x57\x12\x50\xa7\x00\xcf\xc1\x29\x40\xf4\x5d\xbb\x46\x61\x63\x14\x07\x3b\x5d\x2f\x05\x41\x07\x41\x25\xb4\x43\x78\xfc\x78\x91\xcd\x9e\x5f\x8d\xf7\x30\x75\xb3\x79\xf5\xed\x1a\x5b\x30\x62\x27\xbf\x7a\xe9\x17\x60\x2d\xaf\xb1\xbc\x88\x0f\x58\x98\xc6\xa6\x89\x4c\x12\x7e\xe9\xaa\x3a\x8c\x29\x22\xcd\x37\xa2\xd4\x09\xc3\xe7\xb5\x1e\xeb\x50\x48\x8c\x28\x15\xc2\x11\x66\x0e\x03\x88\x4a\x03\x2c\xca\xcf\x4f\x0e\xfc\x0e\x91\xc3\x35\xdd\x78\xc3\xc1\xc5\x5b\x3f\xc4\x1e\x14\x64\xaf\x04\x4f\xe9\x76\x57\xe3\xc8\xed\xaa\x31\x45\x1a\x5a\xf0\xd5\x31\x29\xc7\xaa\xfe\xac\x7c\x53\x9c\x7d\x33\xc5\x54\xe3\x38\x55\x00\xed\xbc\xdc\x8e\xa3\x97\xcc\x20\x71\x87\x48\x3d\x03\x0d\x09\xfd\xe8\xea\x44\x72\x18\xe6\x31\x40\x69\xd3\x12\x55\x2c\x9f\x14\x38\xc2\x24\x6a\xfa\xd2\x12\x48\xb3\x96\x6f\xd9\x31\xdf\x46\x8f\x58\x00\x0d\x37\x0a\x8b\x7e\x6d\xab\x3c\xae\x37\x67\x11\xe4\xc0\x8f\xf3\xe4\xb9\x62\xb9\xf9\x7e\x19\xd3\xb1\x90\xbd\xaf\x53\x11\x58\x8b\xe5\xd8\xe9\x07\x5b\x32\x0f\x65\x18\x53\x6e\x4d\xc4\xd2\xbb\x22\x40\x82\xb4\x48\xa5\xdb\x7d\x20\x1a\xb8\x87\xc1\xa4\xc8\x41\xfb\xc1\xd3\xb4\x74\xcc\x38\xc3\x26\xe9\x9e\x2f\x3b\x1d\x78\xf8\xbb\x41\xd4\x0c\x33\x4f\x66\x2a\x17\x3c\x98\x5e\x29\xc7\xe9\xfc\x13\x04\x9c\xb7\x09\x59\x34\x8c\xca\xac\x5e\x40\x43\x6f\x1c\xd9\x97\x7b\x5a\x1e\xe4\xbe\xf1\xcd\x0b\x36\xd6\x42\x99\xfa\xde\x05\x2e\xa6\xa5\x08\x15\x9e\x85\x4d\x40\x56\xe6\xa3\xce\x3c\x7e\x74\x54\xf1\x06\x0c\xb0\x1d\x33\xd7\x3d\xdc\x40\x39\xf4\xf2\x71\xcb\x17\x5f\xec\x26\xd1\xad\x51\x91\x3f\x64\xb5\xd2\x8d\x3b\xed\xbd\xf8\x88\x1e\x39\xc8\xc5\x42\x32\x43\x10\x19\x29\xca\x3c\x6f\x1d\xe1\x9c\x18\x01\xe6\x0d\xb6\x0f\x7e\x35\x10\x48\x3b\x9d\x53\x3d\x67\xce\xd6\xcd\x9c\x8c\xc8\xcb\x80\xc7\x5e\x37\xf9\x6f\xbb\xfe\x38\x4c\x0e\x22\x6d\xcb\x8c\xf9\xc3\xac\xde\x93\x8e\xac\x98\xa5\x4a\x96\xb1\x7d\x80\x94\x4d\x5d\xfa\x99\x92\xd7\x57\x38\x43\x63\xde\x74\x3f\xab\x77\xb2\x25\x02\x3a\xe9\x5e\xe3\x43\xed\xfe\xbc\xbd\xee\xaf\xfd\x25\x40\x0a\x93\xd6\xab\x9f\x60\xf6\x35\x0c\x9e\x18\x88\x72\x62\x9c\x1e\xb0\xc2\x60\xe3\x7e\x3b\xbe\x8a\x44\x16\xe7\x35\xfb\x93\x7e\xe0\x94\xc2\x26\xa2\x80\xd1\xab\x6f\x24\x0c\x34\xf8\x8f\xe2\x5f\x60\xb6\xa5\x7e\xfe\x0a\xef\xc4\x89\x50\x16\xb4\xe3\x81\x60\x54\x5b\x94\x81\x78\xa4\xc2\x82\xc8\x94\x9a\x4b\x99\xd7\xe2\x43\x99\x81\x6b\x0f\x54\xf6\x28\x51\x62\x0e\x9a\x54\xf0\x1e\xe7\x67\x34\xae\xa2\x35\x28\xc7\x2d\x67\x36\x75\x6a\xcb\x38\xe7\x13\x06\x47\xc8\x75\xbc\x81\x83\xa0\xa0\xa1\xee\x92\xa0\x0d\x8b\x62\xaf\x91\x18\x4b\x09\x7b\x33\xb0\xbe\xbc\xec\x2a\x81\x92\x70\x45\xdd\x83\x31\x8e\xce\x54\xdf\xdb\xb9\xf0\xc8\x7b\xf7\x9a\x65\xfd\xab\xf8\xf9\x44\x20\x40\xf0\xad\x07\xda\x68\x54\xf1\x37\x73\x32\xf5\xfe\xb5\x17\x0d\xff\x8a\xe6\xd2\xbc\x86\x2a\x81\x71\x41\x8e\x8f\x8a\x29\x69\x24\x8c\x7d\xf1\x7d\x99\x4e\x2a\xdb\xed\x2c\x3d\x86\x35\x1a\xdb\xf2\xc1\x81\x67\xa8\x50\xcd\x6b\x90\x63\xf3\xaf\xf4\x78\x1c\x93\xbe\x1b\xcc\xa6\xfb\xb1\xc2\x17\xef\x1c\x8f\xc9\x8d\x4b\x07\xdc\x95\x4d\x0b\x2b\x28\xb0\x0b\xe6\xdd\x94\x35\xed\x69\x5b\xde\x2b\x77\x85\x18\xc0\x53\x85\xd5\x72\x7f\xc4\xf6\x84\x82\x0f\x51\x41\x6f\x1a\x23\x6c\x55\x48\x9b\x61\x34\xd5\x8a\xfa\xaa\xc4\x67\x45\x06\xef\x27\x99\x1d\x23\x6d\x0b\xc5\xc2\x3f\x6a\xc9\xc4\x27\x3f\x3e\xcd\xb1\x43\x81\x63\x94\xdc\xcc\x20\xb0\x74\x78\xd2\xda\xec\x20\xb2\xf4\xa2\x4c\x35\x39\xce\xb3\x5b\x4f\xbf\x83\x17\x4c\x19\x61\x3e\x87\x5a\xbf\xa8\x89\x8c\x32\x41\xfe\xcb\x0f\x68\xad\x3e\x18\xbf\x71\x6a\x1b\x01\x9b\x6e\x57\x72\xef\xf5\x8a\xf3\x3a\xac\x75\x98\x67\xdd\x35\xb7\x39\x2b\x63\xb6\xd3\x8d\x0c\x71\x84\xdb\xe8\x98\xa4\xf2\x7b\xcf\x17\xe4\xa5\xb2\x37\x74\xb3\x0c\xbe\xa8\x49\xc1\xe1\x96\x1e\xf5\x01\xbd\x77\x71\x4a\xcb\xe9\x9f\xcb\xd2\xd7\xb7\xe3\xda\x53\xaf\xaf\xa5\x71\x95\x00\x0b\xfe\xd2\xb6\x20\x45\x7f\x72\x76\x00\xef\x4f\x16\x96\x9a\x21\x87\x03\x3f\x10\x28\x33\x2e\x74\x75\xd4\x28\x1b\x00\xb3\xc4\x1e\x46\x92\xdf\x0b\x67\x9e\xef\x1e\x3a\xe3\x4e\x64\x5a\x7e\x36\xf9\x9f\x91\xd0\xa7\xad\x07\x37\x6b\xf1\xaf\x36\x5e\x6d\x6c\xa7\x12\x46\x48\xd3\x14\xce\xb0\xb0\x46\xae\xcd\xe1\xcd\x09\x03\x32\x41\x54\x4f\x88\xf8\x11\xc5\x9f\x55\xa2\xd8\xaf\xa7\xc4\xba\x18\x6a\xee\xf5\xc1\xb6\x3d\x1a\x3c\xb0\x7e\x58\x2e\x93\x7a\xf7\x4b\x6d\x12\xb3\x4f\xe7\x34\x5f\x2f\x77\x21\x8f\xa8\x34\x95\x0a\x02\xd2\xba\x7b\xb3\xd3\xeb\x17\x56\x7c\x8b\xea\xec\xcc\xc1\x65\x35\x59\x43\xbf\xb3\xc8\xc7\xf8\x54\xdd\x6d\x5d\xf8\xce\x5e\xf5\x04\x72\x2a\x19\xae\x1c\x4a\x6d\x45\xa8\x2e\x69\xc4\xf9\xba\x9e\xc9\x1a\x70\x87\x41\xd8\x94\xa0\x93\x82\x4f\xb8\xa9\x27\xeb\xda\x10\x57\x71\xac\x62\xbf\xbb\x90\x7a\x79\x94\xad\x1f\xc2\xbc\x10\xb4\x91\xce\xc7\x80\xe3\xd5\xef\x13\x21\xce\x8c\x66\xf9\x45\x20\xa6\x17\xf5\x80\x5d\x98\x69\xde\x94\xe5\xc1\x49\x9f\x0b\xa5\x9c\x21\xc0\xfa\x50\xce\x58\x9e\xb2\x51\x2d\x2a\x88\x5b\x51\x98\xc0\x4e\xfa\xda\xe0\xf5\x5b\x22\x87\x32\xdc\x1a\xe0\x6f\xa5\x88\x6f\xe1\xff\xab\xe6\xdf\x00\x00\x00\xff\xff\xa3\x75\x5e\x1a\x8b\x06\x00\x00")

func assetsKeyPemBytes() ([]byte, error) {
	return bindataRead(
		_assetsKeyPem,
		"assets/key.pem",
	)
}

func assetsKeyPem() (*asset, error) {
	bytes, err := assetsKeyPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/key.pem", size: 1675, mode: os.FileMode(384), modTime: time.Unix(1461537458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsLaunchagentPlist = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x51\xaf\x9a\x40\x10\x85\xdf\xf9\x15\xdb\x7d\x87\x6d\xdf\x9a\x06\x31\x28\x36\x31\x25\x95\x54\x4c\xd3\xc7\x2d\x3b\x17\x89\xb0\x4b\x86\x41\x25\xc6\xff\x7e\x77\xaf\x26\x68\xf4\xfa\x76\x32\x9c\xf9\xce\x61\x20\x9c\x1e\x9b\x9a\xed\x01\xbb\xca\xe8\x09\xff\x16\x7c\xe5\x0c\x74\x61\x54\xa5\xcb\x09\xdf\xe4\x3f\xfd\xef\x7c\x1a\x79\xe1\x97\x64\x35\xcf\xff\x65\x0b\xd6\xd6\x55\x47\x2c\xdb\xcc\xd2\xe5\x9c\x71\x5f\x88\xb8\x6d\x6b\x10\x22\xc9\x13\x96\xa5\xcb\x75\xce\x2c\x43\x88\xc5\x6f\xce\xf8\x96\xa8\xfd\x21\xc4\xe1\x70\x08\xa4\x73\x05\x85\x69\x9c\xb1\x13\x19\x9a\x16\x90\x86\xd4\xc2\x7c\xbb\x10\x28\x52\xdc\xc6\x5c\xe8\x77\x75\x22\x8f\xb1\x50\x55\x05\x39\x61\xe5\x0e\x86\x28\x95\xff\xa1\x0e\x85\x93\x97\x61\x47\x68\x0b\x47\x6f\x4d\xd0\xc0\x00\x18\x28\x38\x86\xe2\x3a\xf4\xc6\xbd\x5f\x00\x6d\x5c\x57\x7b\xb8\xdd\x25\xec\x41\xdc\xba\x6c\xb9\x12\x65\x13\x63\xd9\x37\xa0\xa9\xbb\x35\x4b\x44\x79\xd5\x63\xec\xe9\xc4\x5c\xe2\xac\xd2\x99\xa4\x2d\x3b\x9f\xc7\xec\x7b\xa3\x8f\xbd\xbe\x7f\x16\x8a\x2b\x71\x8c\x5f\x93\xd4\x4a\xa2\x5a\xf5\xe4\x70\x4f\x5e\xd3\xe5\x75\xa4\x4c\x4f\xa9\x29\x1f\x22\x1f\x49\x0b\x44\x83\xaf\x59\x80\xf8\x9a\xf5\xd7\xe0\xce\x8e\x92\x0a\xa1\x20\x83\xc3\x27\x28\x7b\x86\x17\x90\x3f\xbd\x8e\x6d\x67\xa9\x9e\xdc\xdf\xdd\xe2\xf2\x99\x43\xf1\xf1\x1b\x44\xde\x7b\x00\x00\x00\xff\xff\x19\xb9\xd5\x18\x9d\x02\x00\x00")

func assetsLaunchagentPlistBytes() ([]byte, error) {
	return bindataRead(
		_assetsLaunchagentPlist,
		"assets/launchagent.plist",
	)
}

func assetsLaunchagentPlist() (*asset, error) {
	bytes, err := assetsLaunchagentPlistBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/launchagent.plist", size: 669, mode: os.FileMode(420), modTime: time.Unix(1464479857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/cert.pem": assetsCertPem,
	"assets/key.pem": assetsKeyPem,
	"assets/launchagent.plist": assetsLaunchagentPlist,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"cert.pem": &bintree{assetsCertPem, map[string]*bintree{}},
		"key.pem": &bintree{assetsKeyPem, map[string]*bintree{}},
		"launchagent.plist": &bintree{assetsLaunchagentPlist, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

